name: Empty Commit

on:
  schedule:
    - cron: "*/5 * * * *" # Runs every 5 minutes
  workflow_dispatch:
    inputs:
      commit_count:
        description: "Number of commits to create"
        required: true
        default: 10
        type: number
      commit_interval:
        description: "Interval between commits in seconds"
        required: false
        default: 6
        type: number

env:
  COMMIT_COUNT: ${{ github.event.inputs.commit_count || 10 }}
  COMMIT_INTERVAL: ${{ github.event.inputs.commit_interval || 6 }}
concurrency:
  group: ${{github.workflow}}
  cancel-in-progress: false

jobs:
  empty-commit:
    runs-on: macos-latest

    permissions:
      contents: write
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: empty # Base branch

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Create multiple empty commits
        run: |
          # Determine number of commits to create
          COMMIT_COUNT=${{ env.COMMIT_COUNT }}
          COMMIT_INTERVAL=${{ env.COMMIT_INTERVAL }}
          echo "Creating $COMMIT_COUNT empty commits with ${COMMIT_INTERVAL}s delay between each"

          # Loop to create multiple commits
          for i in $(seq 1 $COMMIT_COUNT); do
            # Get the current date for the commit message
            CURRENT_DATE=$(date '+%Y-%m-%d %H:%M:%S')
            
            # Create an empty commit with the current date and iteration in the message
            git commit --allow-empty -m "Empty commit $i/$COMMIT_COUNT: $CURRENT_DATE"
            
            # Push after each commit
            git push -f
            
            # Wait the specified interval before next commit, except for the last iteration
            if [ $i -lt $COMMIT_COUNT ]; then
              echo "Waiting ${COMMIT_INTERVAL} seconds before next commit..."
              sleep $COMMIT_INTERVAL
            fi
          done
